diff --git a/pjsip-apps/src/swig/pjsua2.i b/pjsip-apps/src/swig/pjsua2.i
index d33e843ff..daf3ab858 100644
--- a/pjsip-apps/src/swig/pjsua2.i
+++ b/pjsip-apps/src/swig/pjsua2.i
@@ -1,5 +1,7 @@
 %module(directors="1") pjsua2
 
+%apply (char *STRING, size_t LENGTH) { (char *data, size_t datasize) }
+
 //
 // Suppress few warnings
 //
@@ -28,9 +30,9 @@ using namespace pj;
 
 #ifdef SWIGCSHARP
   %typemap(throws, canthrow=1) pj::Error {
-    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
+    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException,
     	(std::string("C++ pj::Error:\n") + $1.info(true).c_str()).c_str());
-    
+
     return $null;
   }
   %typemap(ctype)  void* "void *"
@@ -69,7 +71,7 @@ using namespace pj;
   public String getMessage() {
     return getTitle();
   }
-  
+
   // Disable serialization (check ticket #1868)
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
     throw new java.io.NotSerializableException("Check ticket #1868!");
@@ -87,24 +89,6 @@ using namespace pj;
 #ifdef SWIGJAVA
 %include "enumtypeunsafe.swg"
 %javaconst(1);
-
-%pragma(java) jniclasscode=%{
-  static {
-    try {
-	System.loadLibrary("openh264");
-    } catch (UnsatisfiedLinkError e) {
-	System.err.println("Failed to load native library openh264\n" + e);
-	System.out.println("This could be safely ignored if you " +
-			   "don't use OpenH264 video codec.");
-    }
-    try {
-	System.loadLibrary("pjsua2");
-    } catch (UnsatisfiedLinkError e) {
-	System.err.println("Failed to load native library pjsua2\n" + e);
-    }
-  }
-%}
-
 #endif
 
 %include "symbols.i"
@@ -114,12 +98,13 @@ using namespace pj;
 // Classes that can be extended in the target language
 //
 %feature("director") LogWriter;
-%feature("director") Endpoint; 
+%feature("director") Endpoint;
 %feature("director") Account;
 %feature("director") Call;
 %feature("director") Buddy;
 %feature("director") FindBuddyMatch;
 %feature("director") AudioMediaPlayer;
+%feature("director") AudioMediaCapture;
 %feature("director") AudioMediaPort;
 
 //
@@ -177,7 +162,7 @@ using namespace pj;
 %template(CodecInfoVector2)		std::vector<pj::CodecInfo>;
 %template(VideoDevInfoVector)		std::vector<pj::VideoDevInfo*>;
 %template(VideoDevInfoVector2)		std::vector<pj::VideoDevInfo>;
-%template(CodecFmtpVector)		std::vector<pj::CodecFmtp>;	
+%template(CodecFmtpVector)		std::vector<pj::CodecFmtp>;
 %template(MediaFormatAudioVector)       std::vector<pj::MediaFormatAudio>;
 %template(MediaFormatVideoVector)       std::vector<pj::MediaFormatVideo>;
 %template(CallMediaInfoVector)          std::vector<pj::CallMediaInfo>;
@@ -210,6 +195,27 @@ using namespace pj;
 }
 #endif
 
+
+#ifdef SWIGPYTHON
+  %typemap(in) (char *data, size_t datasize) {
+    Py_ssize_t len;
+    PyBytes_AsStringAndSize($input, &$1, &len);
+    $2 = (size_t)len;
+  }
+
+  %typemap(in, numinputs=0) (char **data, size_t *datasize)(char *temp, size_t tempsize) {
+    $1 = &temp;
+    $2 = &tempsize;
+  }
+
+  %typemap(argout) (char **data, size_t *datasize) {
+    if(*$1) {
+      $result = PyBytes_FromStringAndSize(*$1, *$2);
+      free(*$1);
+    }
+  }
+#endif
+
 %include "pjsua2/media.hpp"
 %include "pjsua2/presence.hpp"
 %include "pjsua2/account.hpp"
@@ -235,6 +241,22 @@ using namespace pj;
 	libDestroy_();
   }
 %}
+%typemap(throws, throws="java.lang.Exception") pj::Error {
+  jclass excep = jenv->FindClass("java/lang/Exception");
+  if (excep)
+    jenv->ThrowNew(excep, $1.info(true).c_str());
+  return $null;
+}
+
+  // Force the Error Java class to extend java.lang.Exception
+  %typemap(javabase) pj::Error "java.lang.Exception";
+
+  // Override getMessage()
+  %typemap(javacode) pj::Error %{
+  public String getMessage() {
+    return getTitle();
+  }
+%}
 #endif
 
 %include "pjsua2/endpoint.hpp"
diff --git a/pjsip-apps/src/swig/python/Makefile b/pjsip-apps/src/swig/python/Makefile
index 662662f25..623f810e3 100644
--- a/pjsip-apps/src/swig/python/Makefile
+++ b/pjsip-apps/src/swig/python/Makefile
@@ -8,7 +8,7 @@ else
   PYTHON_EXE=python2
 endif
 
-#PYTHON_SETUP_FLAGS = --inplace 
+#PYTHON_SETUP_FLAGS = --inplace
 ifeq ($(OS),Windows_NT)
   PYTHON_PKG_DIR := $(shell $(PYTHON_EXE) -m site --user-site | sed 's/\\/\//g')
   PYTHON_SETUP_FLAGS += --compiler=mingw32
@@ -22,7 +22,7 @@ SWIG_FLAGS=-I../../../../pjlib/include \
 		   -I../../../../pjlib-util/include \
 		   -I../../../../pjmedia/include \
 		   -I../../../../pjsip/include \
-		   -I../../../../pjnath/include -c++ 
+		   -I../../../../pjnath/include -c++
 SRC_DIR=../../../../pjsip/include
 SRCS=$(SRC_DIR)/pjsua2/endpoint.hpp $(SRC_DIR)/pjsua2/types.hpp
 
diff --git a/pjsip/include/pjsua2/media.hpp b/pjsip/include/pjsua2/media.hpp
index acafaca67..ec7ec82d7 100644
--- a/pjsip/include/pjsua2/media.hpp
+++ b/pjsip/include/pjsua2/media.hpp
@@ -25,6 +25,8 @@
  */
 #include <pjsua-lib/pjsua.h>
 #include <pjsua2/types.hpp>
+#include <mutex>
+#include <list>
 
 /** PJSUA2 API is inside pj namespace */
 namespace pj
@@ -37,7 +39,7 @@ namespace pj
  */
 
 using std::string;
-using std::vector;
+// using std::list;
 
 /**
  * This structure contains all the information needed to completely describe
@@ -129,7 +131,7 @@ typedef std::vector<MediaFormatVideo> MediaFormatVideoVector;
 
 /**
  * This structure descibes information about a particular media port that
- * has been registered into the conference bridge. 
+ * has been registered into the conference bridge.
  */
 struct ConfPortInfo
 {
@@ -231,7 +233,7 @@ public:
 
 /**
  * Audio Media. This is a lite wrapper class for audio conference bridge port,
- * i.e: this class only maintains one data member, conference slot ID, and 
+ * i.e: this class only maintains one data member, conference slot ID, and
  * the methods are simply proxies for conference bridge operations.
  *
  * Application can create a derived class and use registerMediaPort2()/
@@ -423,7 +425,7 @@ private:
     pj_pool_t           *mediaPool;
 };
 
-/** 
+/**
  * Warning: deprecated, use AudioMediaVector2 instead.
  *
  * Array of Audio Media.
@@ -553,13 +555,13 @@ public:
 class AudioMediaPlayer : public AudioMedia
 {
 public:
-    /** 
+    /**
      * Constructor.
      */
     AudioMediaPlayer();
 
     /**
-     * Create a file player,  and automatically add this 
+     * Create a file player,  and automatically add this
      * player to the conference bridge.
      *
      * @param file_name  The filename to be played. Currently only
@@ -741,6 +743,48 @@ private:
     int recorderId;
 };
 
+// pj_status_t incomingFrameHandler(pjmedia_port *, void *);
+
+class AudioMediaCapture : public AudioMedia {
+public:
+    AudioMediaCapture();
+    ~AudioMediaCapture();
+    void createMediaCapture();
+    void getFrames(char **data, size_t *datasize);
+    string getFramesAsString();
+    // static pj_status_t processFrames(pjmedia_port *, void *);
+    static void processFrames(pjmedia_port *, void *);
+    virtual void onFrame(char *data, size_t datasize) {}
+    void disableReceivingFrames();
+    void enableReceivingFrames();
+private:
+    bool receive_frames;
+    pj_pool_t *pool;
+    void *frame_buffer;
+    uint frame_size;
+    pjmedia_port *capture_port;
+    std::list<string> frames;
+    std::mutex frames_mtx;
+};
+
+class AudioMediaStream : public AudioMedia {
+public:
+    AudioMediaStream();
+    void createMediaStream();
+    virtual ~AudioMediaStream();
+//    static pj_status_t processFrames(pjmedia_port *, void *);
+    static void processFrames(pjmedia_port *, void *);
+    void putFrame(char *data, size_t datasize);
+    void putFrameAsString(string);
+private:
+    pj_pool_t *pool;
+    pjmedia_port *stream_port;
+    void *frame_buffer;
+    uint frame_size;
+    std::list<string> frames;
+    std::mutex frames_mtx;
+};
+
 /**
  * Tone descriptor (abstraction for pjmedia_tone_desc)
  */
@@ -952,7 +996,7 @@ struct AudioDevInfo
     ~AudioDevInfo();
 };
 
-/** 
+/**
  * Warning: deprecated, use AudioDevInfoVector2 instead.
  *
  * Array of audio device info.
@@ -1000,7 +1044,7 @@ public:
 
     /**
      * Select or change capture sound device. Application may call this
-     * function at any time to replace current sound device. Calling this 
+     * function at any time to replace current sound device. Calling this
      * method will not change the state of the sound device (opened/closed).
      *
      * @param capture_dev       Device ID of the capture device.
@@ -1009,7 +1053,7 @@ public:
 
     /**
      * Select or change playback sound device. Application may call this
-     * function at any time to replace current sound device. Calling this 
+     * function at any time to replace current sound device. Calling this
      * method will not change the state of the sound device (opened/closed).
      *
      * @param playback_dev      Device ID of the playback device.
@@ -1602,7 +1646,7 @@ private:
 /**
  * Extra audio device. This class allows application to have multiple
  * sound device instances active concurrently.
- 
+
  * Application may also use this class to improve media clock. Normally
  * media clock is driven by sound device in master port, but unfortunately
  * some sound devices may produce jittery clock. To improve media clock,
@@ -1682,7 +1726,7 @@ struct MediaSize
 
 /**
  * This structure descibes information about a particular media port that
- * has been registered into the conference bridge. 
+ * has been registered into the conference bridge.
  */
 struct VidConfPortInfo
 {
@@ -1917,7 +1961,7 @@ public:
      * @return                  Video media of this renderer window.
      */
     VideoMedia getVideoMedia() PJSUA2_THROW(Error);
-    
+
     /**
      * Show or hide window. This operation is not valid for native windows
      * (VideoWindowInfo.isNative=true), on which native windowing API
@@ -1928,7 +1972,7 @@ public:
      *
      */
     void Show(bool show) PJSUA2_THROW(Error);
-    
+
     /**
      * Set video window position. This operation is not valid for native windows
      * (VideoWindowInfo.isNative=true), on which native windowing API
@@ -1938,7 +1982,7 @@ public:
      *
      */
     void setPos(const MediaCoordinate &pos) PJSUA2_THROW(Error);
-    
+
     /**
      * Resize window. This operation is not valid for native windows
      * (VideoWindowInfo.isNative=true), on which native windowing API
@@ -1948,7 +1992,7 @@ public:
      *
      */
     void setSize(const MediaSize &size) PJSUA2_THROW(Error);
-    
+
     /**
      * Rotate the video window. This function will change the video orientation
      * and also possibly the video window size (width and height get swapped).
@@ -2049,7 +2093,7 @@ public:
      */
     VideoPreviewOpParam();
 
-    /** 
+    /**
      * Convert from pjsip
      */
     void fromPj(const pjsua_vid_preview_param &prm);
@@ -2106,8 +2150,6 @@ public:
 
 private:
     pjmedia_vid_dev_index devId;
-    pjsua_vid_win_id winId;
-    void updateDevId();
 };
 
 /**
@@ -2136,8 +2178,8 @@ struct VideoDevInfo
      */
     pjmedia_dir dir;
 
-    /** 
-     * Device capabilities, as bitmask combination of #pjmedia_vid_dev_cap 
+    /**
+     * Device capabilities, as bitmask combination of #pjmedia_vid_dev_cap
      */
     unsigned caps;
 
@@ -2167,7 +2209,7 @@ public:
     ~VideoDevInfo();
 };
 
-/** 
+/**
  * Warning: deprecated, use VideoDevInfoVector2 instead.
  *
  * Array of video device info.
@@ -2188,7 +2230,7 @@ struct VideoSwitchParam
      */
     pjmedia_vid_dev_index target_id;
 };
- 
+
 /**
  * Video device manager.
  */
@@ -2225,7 +2267,7 @@ public:
     unsigned getDevCount();
 
     /**
-     * Retrieve the video device info for the specified device index.     
+     * Retrieve the video device info for the specified device index.
      *
      * @param dev_id    The video device id
      * 
@@ -2274,9 +2316,9 @@ public:
     string capName(pjmedia_vid_dev_cap cap) const;
 
     /**
-     * This will configure video format capability to the video device. 
-     * If video device is currently active, the method will forward the setting 
-     * to the video device instance to be applied immediately, if it 
+     * This will configure video format capability to the video device.
+     * If video device is currently active, the method will forward the setting
+     * to the video device instance to be applied immediately, if it
      * supports it.
      *
      * This method is only valid if the device has
@@ -2299,9 +2341,9 @@ public:
     /**
      * Get the video format capability to the video device.
      * If video device is currently active, the method will forward the request
-     * to the video device. If video device is currently inactive, and if 
-     * application had previously set the setting and mark the setting as kept, 
-     * then that setting will be returned. Otherwise, this method will 
+     * to the video device. If video device is currently inactive, and if
+     * application had previously set the setting and mark the setting as kept,
+     * then that setting will be returned. Otherwise, this method will
      * raise error.
      *
      * This method is only valid if the device has
@@ -2359,10 +2401,10 @@ public:
      * to the video device instance to be applied immediately, if it
      * supports it.
      *
-     * This method is only valid if the device has 
-     * PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW_FLAGS capability in VideoDevInfo.caps 
+     * This method is only valid if the device has
+     * PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW_FLAGS capability in VideoDevInfo.caps
      * flags, otherwise Error will be thrown.
-     * 
+     *
      * Note that in case the setting is kept for future use, it will be applied
      * to any devices, even when application has changed the video device to be
      * used.
@@ -2384,7 +2426,7 @@ public:
      * raise error.
      *
      * This method is only valid if the device has
-     * PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW_FLAGS capability in VideoDevInfo.caps 
+     * PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW_FLAGS capability in VideoDevInfo.caps
      * flags, otherwise Error will be thrown.
      *
      * @param dev_id    The video device id.
@@ -2411,7 +2453,7 @@ public:
     /**
      * Check whether the video capture device is currently active, i.e. if
      * a video preview has been started or there is a video call using
-     * the device.    
+     * the device.
      *
      * @param dev_id    The video device id
      * 
@@ -2492,7 +2534,7 @@ struct CodecInfo
     void fromPj(const pjsua_codec_info &codec_info);
 };
 
-/** 
+/**
  * Warning: deprecated, use CodecInfoVector2 instead.
  *
  * Array of codec info.
@@ -2617,7 +2659,7 @@ struct CodecOpusConfig
 
 /**
  * Detailed codec attributes used in configuring a video codec and in querying
- * the capability of video codec factories. 
+ * the capability of video codec factories.
  *
  * Please note that codec parameter also contains SDP specific setting,
  * #decFmtp and #encFmtp, which may need to be set appropriately based on
@@ -2719,7 +2761,7 @@ struct MediaEvent
      * will be specific to the event type being reported.
      */
     MediaEventData              data;
-    
+
     /**
      * Pointer to original pjmedia_event. Only valid when the struct
      * is converted from PJSIP's pjmedia_event.
diff --git a/pjsip/src/pjsua2/media.cpp b/pjsip/src/pjsua2/media.cpp
index f83d122e7..fa6c61afc 100644
--- a/pjsip/src/pjsua2/media.cpp
+++ b/pjsip/src/pjsua2/media.cpp
@@ -289,15 +289,15 @@ static pj_status_t get_frame(pjmedia_port *port, pjmedia_frame *frame)
     mport->onFrameRequested(frame_);
     frame->type = frame_.type;
     frame->size = PJ_MIN(frame_.buf.size(), frame_.size);
-
-#if ((defined(_MSVC_LANG) && _MSVC_LANG <= 199711L) || __cplusplus <= 199711L)
-    /* C++98 does not have Vector::data() */
-    if (frame->size > 0)
+
+#if ((defined(_MSVC_LANG) && _MSVC_LANG <= 199711L) || __cplusplus <= 199711L)
+    /* C++98 does not have Vector::data() */
+    if (frame->size > 0)
         pj_memcpy(frame->buf, &frame_.buf[0], frame->size);
 #else
-    /* Newer than C++98 */
+    /* Newer than C++98 */
     pj_memcpy(frame->buf, frame_.buf.data(), frame->size);
-#endif
+#endif
 
 
     return PJ_SUCCESS;
@@ -540,6 +540,177 @@ AudioMediaRecorder* AudioMediaRecorder::typecastFromAudioMedia(
 
 ///////////////////////////////////////////////////////////////////////////////
 
+// pj_status_t incomingFrameHandler(pjmedia_port *port, void *usr_data);
+
+AudioMediaCapture::AudioMediaCapture()
+{
+    pool = pjsua_pool_create("capture_pool", 2000, 2000);
+    frame_buffer = NULL;
+    capture_port = NULL;
+    receive_frames = true;
+}
+
+AudioMediaCapture::~AudioMediaCapture()
+{
+    if(capture_port) {
+        unregisterMediaPort();
+        pjmedia_port_destroy(capture_port);
+        capture_port = NULL;
+        frame_buffer = NULL;
+    }
+    if(pool) {
+        pj_pool_safe_release(&pool);
+    }
+}
+
+void AudioMediaCapture::createMediaCapture()
+{
+    int sample_rate = 8000 * 6;
+    int bits_per_sample = 16;
+    int samples_per_frame = 160 * 6;
+    int channels_count = 1;
+
+    frame_size = bits_per_sample*samples_per_frame*channels_count/8;
+    frame_buffer = pj_pool_zalloc(pool, frame_size);
+
+    pj_status_t status;
+
+    status = pjmedia_mem_capture_create( pool, //Pool
+                          frame_buffer, //Buffer
+                          frame_size, //Buffer Size
+                          sample_rate,
+                          channels_count,
+                          samples_per_frame,
+                          bits_per_sample,
+                          0, //Options
+                          &capture_port); //The return port}
+    if (status != PJ_SUCCESS) {
+        PJSUA2_RAISE_ERROR(status);
+    }
+
+    status = pjmedia_mem_capture_set_eof_cb2(capture_port, this, AudioMediaCapture::processFrames);
+    if (status != PJ_SUCCESS) {
+        PJSUA2_RAISE_ERROR(status);
+    }
+
+    registerMediaPort2(capture_port, pool);
+}
+
+void AudioMediaCapture::processFrames(pjmedia_port *port, void *usr_data) {
+    AudioMediaCapture *capture = static_cast<AudioMediaCapture *>(usr_data);
+//    const std::lock_guard<std::mutex> lock(capture->frames_mtx);
+//    capture->frames.push_back(string((char *)capture->frame_buffer, capture->frame_size));
+
+    if (!capture->receive_frames) {
+        return;
+    }
+
+    capture->onFrame((char *)capture->frame_buffer, capture->frame_size);
+}
+
+string AudioMediaCapture::getFramesAsString()
+{
+    const std::lock_guard<std::mutex> lock(frames_mtx);
+    std::string s="";
+    for (const auto &piece : frames) s += piece;
+    frames.clear();
+    return s;
+}
+
+void AudioMediaCapture::getFrames(char **data, size_t *datasize)
+{
+    std::string s = getFramesAsString();
+    size_t size = s.length();
+    char *c = new char[size];
+    s.copy(c, size, 0);
+    *datasize = size;
+    *data = c;
+}
+
+void AudioMediaCapture::disableReceivingFrames() {receive_frames = false;}
+void AudioMediaCapture::enableReceivingFrames() {receive_frames = true;}
+
+AudioMediaStream::AudioMediaStream() {
+    pool = pjsua_pool_create("stream_pool", 2000, 2000);
+    frame_buffer = NULL;
+    stream_port = NULL;
+}
+
+AudioMediaStream::~AudioMediaStream() {
+    if(stream_port) {
+        unregisterMediaPort();
+        pjmedia_port_destroy(stream_port);
+        stream_port = NULL;
+        frame_buffer = NULL;
+    }
+    if(pool) {
+        pj_pool_safe_release(&pool);
+    }
+}
+
+void AudioMediaStream::putFrameAsString(string data) {
+    const std::lock_guard<std::mutex> lock(frames_mtx);
+    frames.push_front(data);
+}
+
+void AudioMediaStream::putFrame(char *data, size_t datasize) {
+    const std::lock_guard<std::mutex> lock(frames_mtx);
+    frames.push_front(std::string(data, datasize));
+    //frames.push_front(frame);
+}
+
+//pj_status_t AudioMediaStream::processFrames(pjmedia_port *port, void *usr_data) {
+void AudioMediaStream::processFrames(pjmedia_port *port, void *usr_data) {
+    AudioMediaStream *stream = static_cast<AudioMediaStream *>(usr_data);
+    if(stream->frames.size() > 0) {
+        string f = stream->frames.back();
+        uint buf_size = f.length();
+        if(buf_size > stream->frame_size) buf_size = stream->frame_size;
+        f.copy((char*)stream->frame_buffer, buf_size, 0);
+        const std::lock_guard<std::mutex> lock(stream->frames_mtx);
+        stream->frames.pop_back();
+    } else {
+        memset((char*)stream->frame_buffer, 0, stream->frame_size);
+    }
+}
+
+void AudioMediaStream::createMediaStream()
+{
+    int sample_rate = 8000 * 6;
+    int bits_per_sample = 16;
+    int samples_per_frame = 160 * 6;
+    int channels_count = 1;
+
+    frame_size = bits_per_sample*samples_per_frame*channels_count/8;
+    frame_buffer = pj_pool_zalloc(pool, frame_size);
+
+    pj_status_t status;
+
+    status = pjmedia_mem_player_create( pool, //Pool
+                          frame_buffer, //Buffer
+                          frame_size, //Buffer Size
+                          sample_rate,
+                          channels_count,
+                          samples_per_frame,
+                          bits_per_sample,
+                          0, //Options
+                          // PJMEDIA_MEM_NO_LOOP,
+                          &stream_port); //The return port}
+    if (status != PJ_SUCCESS) {
+        PJSUA2_RAISE_ERROR(status);
+    }
+
+    //    pjmedia_mem_player_set_eof_cb(stream_port, this, AudioMediaStream::processFrames);
+    status = pjmedia_mem_player_set_eof_cb2(stream_port, this, AudioMediaStream::processFrames);
+    if (status != PJ_SUCCESS) {
+        PJSUA2_RAISE_ERROR(status);
+    }
+
+    registerMediaPort2(stream_port, pool);
+}
+
+///////////////////////////////////////////////////////////////////////////////
+
 ToneGenerator::ToneGenerator()
 : pool(NULL), tonegen(NULL)
 {
@@ -800,13 +971,15 @@ AudioMedia &AudDevManager::getPlaybackDevMedia() PJSUA2_THROW(Error)
 }
 
 void AudDevManager::setCaptureDev(int capture_dev) const PJSUA2_THROW(Error)
-{    
+{
     pjsua_snd_dev_param param;
+    pjsua_snd_dev_param_default(&param);
 
     pjsua_snd_dev_param_default(&param);
     PJSUA2_CHECK_EXPR(pjsua_get_snd_dev2(&param));
     param.capture_dev = capture_dev;
-    
+    param.playback_dev = getPlaybackDev();
+
     /* Normalize invalid ID or null device to default device */
     if (param.playback_dev == PJMEDIA_AUD_INVALID_DEV ||
         param.playback_dev == PJSUA_SND_NULL_DEV)
@@ -814,7 +987,7 @@ void AudDevManager::setCaptureDev(int capture_dev) const PJSUA2_THROW(Error)
         param.playback_dev = PJMEDIA_AUD_DEFAULT_PLAYBACK_DEV;
     }
 
-    param.mode |= PJSUA_SND_DEV_NO_IMMEDIATE_OPEN;
+    param.mode = PJSUA_SND_DEV_NO_IMMEDIATE_OPEN;
 
     PJSUA2_CHECK_EXPR( pjsua_set_snd_dev2(&param) );
 }
@@ -822,6 +995,7 @@ void AudDevManager::setCaptureDev(int capture_dev) const PJSUA2_THROW(Error)
 void AudDevManager::setPlaybackDev(int playback_dev) const PJSUA2_THROW(Error)
 {
     pjsua_snd_dev_param param;
+    pjsua_snd_dev_param_default(&param);
 
     pjsua_snd_dev_param_default(&param);
     PJSUA2_CHECK_EXPR(pjsua_get_snd_dev2(&param));
@@ -836,7 +1010,7 @@ void AudDevManager::setPlaybackDev(int playback_dev) const PJSUA2_THROW(Error)
 
     param.mode |= PJSUA_SND_DEV_NO_IMMEDIATE_OPEN;
 
-    PJSUA2_CHECK_EXPR( pjsua_set_snd_dev2(&param) );    
+    PJSUA2_CHECK_EXPR( pjsua_set_snd_dev2(&param) );
 }
 
 #if !DEPRECATED_FOR_TICKET_2232
@@ -887,11 +1061,16 @@ MediaPort *AudDevManager::setNoDev()
 }
 
 void AudDevManager::setSndDevMode(unsigned mode) const PJSUA2_THROW(Error)
-{    
+{
+    int capture_dev = 0, playback_dev = 0;
     pjsua_snd_dev_param param;
-
+    pj_status_t status = pjsua_get_snd_dev(&capture_dev, &playback_dev);
+    if (status != PJ_SUCCESS) {
+	PJSUA2_RAISE_ERROR2(status, "AudDevManager::setSndDevMode()");
+    }
     pjsua_snd_dev_param_default(&param);
-    PJSUA2_CHECK_EXPR(pjsua_get_snd_dev2(&param));
+    param.capture_dev = capture_dev;
+    param.playback_dev = playback_dev;
     param.mode = mode;
     PJSUA2_CHECK_EXPR( pjsua_set_snd_dev2(&param) );
 }
@@ -1191,7 +1370,7 @@ int AudDevManager::getActiveDev(bool is_capture) const PJSUA2_THROW(Error)
 ///////////////////////////////////////////////////////////////////////////////
 ExtraAudioDevice::ExtraAudioDevice (int playdev, int recdev) :
     playDev(playdev), recDev(recdev), ext_snd_dev(NULL)
-{ 
+{
 }
 
 ExtraAudioDevice::~ExtraAudioDevice()
@@ -1215,7 +1394,7 @@ void ExtraAudioDevice::open()
     /* Generate sound device port param */
     pjmedia_snd_port_param param;
     pjmedia_snd_port_param_default(&param);
-    
+
     status = pjmedia_aud_dev_default_param(recDev, &param.base);
     PJSUA2_CHECK_RAISE_ERROR(status);
 
@@ -1274,7 +1453,7 @@ VideoWindowInfo VideoWindow::getInfo() const PJSUA2_THROW(Error)
     pj_bzero(&vwi, sizeof(vwi));
 #if PJSUA_HAS_VIDEO
     pjsua_vid_win_info pj_vwi;
-    
+
     PJSUA2_CHECK_EXPR( pjsua_vid_win_get_info(winId, &pj_vwi) );
     vwi.isNative = (pj_vwi.is_native != PJ_FALSE);
     vwi.winHandle.type = pj_vwi.hwnd.type;
@@ -1285,7 +1464,7 @@ VideoWindowInfo VideoWindow::getInfo() const PJSUA2_THROW(Error)
     vwi.pos.y = pj_vwi.pos.y;
     vwi.size.w = pj_vwi.size.w;
     vwi.size.h = pj_vwi.size.h;
-    
+
 #endif
     return vwi;
 }
@@ -1322,7 +1501,7 @@ void VideoWindow::setPos(const MediaCoordinate &pos) PJSUA2_THROW(Error)
 {
 #if PJSUA_HAS_VIDEO
     pjmedia_coord pj_pos;
-    
+
     pj_pos.x = pos.x;
     pj_pos.y = pos.y;
     PJSUA2_CHECK_EXPR( pjsua_vid_win_set_pos(winId, &pj_pos) );
@@ -1357,7 +1536,7 @@ void VideoWindow::setWindow(const VideoWindowHandle &win) PJSUA2_THROW(Error)
 {
 #if PJSUA_HAS_VIDEO
     pjmedia_vid_dev_hwnd vhwnd;
-   
+
     vhwnd.type = win.type;
     vhwnd.info.window = win.handle.window;
     PJSUA2_CHECK_EXPR( pjsua_vid_win_set_win(winId, &vhwnd) );
@@ -1427,12 +1606,12 @@ pjsua_vid_preview_param VideoPreviewOpParam::toPj() const
     return param;
 }
 
-VideoPreview::VideoPreview(int dev_id) 
-: devId(dev_id), winId(PJSUA_INVALID_ID)
+VideoPreview::VideoPreview(int dev_id)
+: devId(dev_id)
 {
 #if !PJSUA_HAS_VIDEO
     /* Suppress warning of unused field when video is disabled */
-    PJ_UNUSED_ARG(winId);
+    PJ_UNUSED_ARG(devId);
 #endif
 }
 
@@ -1450,11 +1629,6 @@ void VideoPreview::start(const VideoPreviewOpParam &param) PJSUA2_THROW(Error)
 #if PJSUA_HAS_VIDEO
     pjsua_vid_preview_param prm = param.toPj();
     PJSUA2_CHECK_EXPR(pjsua_vid_preview_start(devId, &prm));
-
-    /* Device may be fast-switched and VideoPreview will not aware of that,
-     * so better keep win ID too.
-     */
-    winId = pjsua_vid_preview_get_win(devId);
 #else
     PJ_UNUSED_ARG(param);
     PJ_UNUSED_ARG(devId);
@@ -1464,15 +1638,14 @@ void VideoPreview::start(const VideoPreviewOpParam &param) PJSUA2_THROW(Error)
 void VideoPreview::stop() PJSUA2_THROW(Error)
 {
 #if PJSUA_HAS_VIDEO
-    updateDevId();
-    PJSUA2_CHECK_EXPR(pjsua_vid_preview_stop(devId));
+    pjsua_vid_preview_stop(devId);
 #endif
 }
 
 VideoWindow VideoPreview::getVideoWindow()
 {
 #if PJSUA_HAS_VIDEO
-    return (VideoWindow(winId));
+    return (VideoWindow(pjsua_vid_preview_get_win(devId)));
 #else
     return (VideoWindow(PJSUA_INVALID_ID));
 #endif
@@ -1481,7 +1654,6 @@ VideoWindow VideoPreview::getVideoWindow()
 VideoMedia VideoPreview::getVideoMedia() PJSUA2_THROW(Error)
 {
 #if PJSUA_HAS_VIDEO
-    updateDevId();
     pjsua_conf_port_id id = pjsua_vid_preview_get_vid_conf_port(devId);
     if (id != PJSUA_INVALID_ID) {
         VideoMediaHelper vm;
@@ -1495,22 +1667,6 @@ VideoMedia VideoPreview::getVideoMedia() PJSUA2_THROW(Error)
 #endif
 }
 
-/* Device may be fastswitched and VideoPreview will not aware of that,
- * this function will update the VideoPreview device ID.
- */
-void VideoPreview::updateDevId()
-{
-#if PJSUA_HAS_VIDEO
-    if (winId != PJSUA_INVALID_ID) {
-        PJSUA_LOCK();
-        pjsua_vid_win *w = &pjsua_var.win[winId];
-        pj_assert(w->type == PJSUA_WND_TYPE_PREVIEW);
-        devId = w->preview_cap_id;
-        PJSUA_UNLOCK();
-    }
-#endif
-}
-
 ///////////////////////////////////////////////////////////////////////////////
 void MediaFormatVideo::fromPj(const pjmedia_format &format)
 {
@@ -1683,7 +1839,7 @@ int VidDevManager::lookupDev(const string &drv_name,
 }
 
 string VidDevManager::capName(pjmedia_vid_dev_cap cap) const
-{    
+{
     string cap_name;
 #if PJSUA_HAS_VIDEO
     cap_name = pjmedia_vid_dev_cap_name(cap, NULL);
@@ -1808,7 +1964,7 @@ void VidDevManager::switchDev(int dev_id,
                                                 PJ_FALSE));
 #else
     PJ_UNUSED_ARG(dev_id);
-    PJ_UNUSED_ARG(param);    
+    PJ_UNUSED_ARG(param);
 #endif
 }
 
@@ -1828,11 +1984,11 @@ bool VidDevManager::isCaptureActive(int dev_id) const
     return (pjsua_vid_dev_is_active(dev_id) == PJ_TRUE? true: false);
 #else
     PJ_UNUSED_ARG(dev_id);
-    
+
     return false;
 #endif
 }
-    
+
 void VidDevManager::setCaptureOrient(pjmedia_vid_dev_index dev_id,
                                      pjmedia_orient orient,
                                      bool keep) PJSUA2_THROW(Error)
@@ -1860,8 +2016,8 @@ VidDevManager::~VidDevManager()
 
 ///////////////////////////////////////////////////////////////////////////////
 
-/** 
- * Utility class for converting CodecFmtpVector to and from pjmedia_codec_fmtp. 
+/**
+ * Utility class for converting CodecFmtpVector to and from pjmedia_codec_fmtp.
  */
 class CodecFmtpUtil
 {
@@ -2011,7 +2167,7 @@ void VidCodecParam::fromPj(const pjmedia_vid_codec_param &param)
 pjmedia_vid_codec_param VidCodecParam::toPj() const
 {
     pjmedia_vid_codec_param param;
-    pj_bzero(&param, sizeof(param));    
+    pj_bzero(&param, sizeof(param));
     param.dir = dir;
     param.packing = packing;
     param.ignore_fmtp = ignoreFmtp;
@@ -2056,7 +2212,7 @@ void VidConfPortInfo::fromPj(const pjsua_vid_conf_port_info &port_info)
     }
 }
 
-VideoMedia::VideoMedia() 
+VideoMedia::VideoMedia()
 : Media(PJMEDIA_TYPE_VIDEO), id(PJSUA_INVALID_ID)
 {
 
@@ -2099,7 +2255,7 @@ void VideoMedia::unregisterMediaPort()
 #endif
 }
 
-VideoMedia::~VideoMedia() 
+VideoMedia::~VideoMedia()
 {
 }
 
